@page "/queue/{queueName}"
@using System.Text.Json
@inject IServiceBusService ServiceBusService

@if (state is null)
{
    <p>You need to specify a queue that exists, return to the Queues page to find a valid queue.</p>
}
else
{
    <FluentLabel Typo="Typography.Header">Queue: @state.Name</FluentLabel>

    <FluentButton Loading="@loading" OnClick="@LoadMessagesAsync" Appearance="Appearance.Accent">Load messages</FluentButton>

    <FluentListbox TOption="ServiceBusMessage" Items="@messages" @bind-SelectedOption="@listboxValue">
        <OptionTemplate>
            @context.MessageId | @context.EnqueuedAt
        </OptionTemplate>
    </FluentListbox>

    if (listboxValue is not null)
    {
        if (listboxValue.ApplicationProperties is not null)
        {
            <h3>Application properties</h3>
            <table>
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in listboxValue.ApplicationProperties)
                    {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <h3>Payload</h3>

        <table>
            <thead>
                <tr>
                    <th>Key</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listboxValue.Payload.RootElement.EnumerateObject())
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Value</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public string? QueueName { get; set; }

    private QueueState? state;

    private bool loading = false;
    private ServiceBusMessage? listboxValue;
    private ServiceBusMessage[] messages = [];

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(QueueName))
        {
            state = await ServiceBusService.GetQueue(QueueName);
        }
    }

    async Task LoadMessagesAsync()
    {
        loading = true;

        messages = await ServiceBusService.GetMessages(state!.Name, 5);

        loading = false;
    }
}
