@page "/queues"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject IDbContextFactory<QueueDbContext> DbContextFactory
@inject NavigationManager NavManager
@implements IDisposable

<PageTitle>Queues</PageTitle>

<div style="height: 400px; overflow-y: scroll;">
    <FluentDataGrid Virtualize="true" Items="@GetQueues()" Pagination="@pagination">
            <ChildContent>
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ActiveCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TotalCount)" Sortable="true" />
            <TemplateColumn Title="View" Align="@Align.End">
                <FluentButton aria-label="View" IconEnd="@(new Icons.Regular.Size16.ContentView())" OnClick="@(() => NavigateToQueue(context))" />
            </TemplateColumn>
        </ChildContent>
        <LoadingContent>
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                Loading...<br />
                <FluentProgress Width="240px" />
            </FluentStack>
        </LoadingContent>
    </FluentDataGrid>
</div>

<FluentPaginator State="@pagination" />

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private QueueDbContext? _dbContext;

    private IQueryable<QueueState>? GetQueues()
    {
        if (_dbContext is null)
        {
            return null;
        }

        var result = _dbContext.Queues.AsNoTracking().AsQueryable();
        return result;
    }

    protected override void OnInitialized()
    {
        _dbContext = DbContextFactory.CreateDbContext();
    }

    private void NavigateToQueue(QueueState context)
    {
        NavManager.NavigateTo($"/queue/{context.Name}");
    }

    public void Dispose()
    {
        _dbContext?.Dispose();
    }
}
