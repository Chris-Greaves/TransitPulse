@page "/queues"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject IDbContextFactory<QueueDbContext> DbContextFactory
@inject NavigationManager NavManager
@implements IDisposable

<PageTitle>Queues</PageTitle>

<FluentDataGrid 
    Items="@FilteredQueues" 
    Pagination="@pagination"
    ResizableColumns="true"
    ResizeType="DataGridResizeType.Discrete"
    HeaderCellAsButtonWithMenu="true"
    GridTemplateColumns="1fr 0.2fr 0.2fr 0.2fr"
    Style="height: 600px; overflow-y: scroll;">
    <PropertyColumn Property="@(p => p.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Tooltip="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Queue name..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.ActiveCount)" Sortable="true" />
    <PropertyColumn Property="@(p => p.TotalCount)" Sortable="true" />
    <TemplateColumn Title="View" Align="@Align.End" SortBy="@rankSort" IsDefaultSortColumn=true>
        <FluentButton aria-label="View" IconEnd="@(new Icons.Regular.Size16.ContentView())" OnClick="@(() => NavigateToQueue(context))" />
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private string nameFilter = "_error";

    private QueueDbContext? _dbContext;

    GridSort<QueueState> rankSort = GridSort<QueueState>
        .ByDescending(q => q.TotalCount);

    IQueryable<QueueState>? FilteredQueues
    {
        get
        {
            var result = queues;

            if (result is null)
                return result;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => EF.Functions.Like(c.Name, $"%{nameFilter}%"));
            }
            
            return result;
        }
    }

    private IQueryable<QueueState>? queues;

    protected override void OnInitialized()
    {
        _dbContext = DbContextFactory.CreateDbContext();
        queues = _dbContext.Queues.AsNoTracking().AsQueryable();
    }
    
    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }
    
    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void NavigateToQueue(QueueState context)
    {
        NavManager.NavigateTo($"/queue/{context.Name}");
    }

    public void Dispose()
    {
        _dbContext?.Dispose();
    }
}
