@page "/queues"
@inject IServiceBusService ServiceBusService
@inject NavigationManager NavManager

<PageTitle>Queues</PageTitle>

<h1>Queues</h1>

@if (queues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Items="@queues" Pagination="@Pagination">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ActiveCount)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TotalCount)" Sortable="true" />
        <TemplateColumn Title="View" Align="@Align.End">
            <FluentButton aria-label="View" IconEnd="@(new Icons.Regular.Size16.ContentView())" OnClick="@(() => NavigateToQueue(context))" />
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@Pagination" />
}

@code {
    private IQueryable<QueueState>? queues;

    private string? continuationToken;

    PaginationState Pagination = new() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await GetQueues();
    }

    private async Task GetQueues()
    {
        do
        {
            var (results, token) = await ServiceBusService.GetQueues(continuationToken);

            continuationToken = token;
            if (queues == null)
            {
                this.queues = results.AsQueryable();
            }
            else
            {
                queues = queues.Concat(results);
            }
        }
        while (!string.IsNullOrEmpty(continuationToken));
    }

    private void NavigateToQueue(QueueState context)
    {
        NavManager.NavigateTo($"/queue/{context.Name}");
    }
}
