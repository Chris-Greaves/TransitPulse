@page "/queues"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject IDbContextFactory<QueueDbContext> DbContextFactory
@inject NavigationManager NavManager
@implements IDisposable

<PageTitle>Queues</PageTitle>

<div style="height: 400px; overflow-y: scroll;">
    <FluentDataGrid Virtualize="true" Items="@FilteredQueues" Pagination="@pagination">
        <ChildContent>
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Queue name..." Style="width: 100%;" Label="Filter" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(p => p.ActiveCount)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TotalCount)" Sortable="true" />
            <TemplateColumn Title="View" Align="@Align.End">
                <FluentButton aria-label="View" IconEnd="@(new Icons.Regular.Size16.ContentView())" OnClick="@(() => NavigateToQueue(context))" />
            </TemplateColumn>
        </ChildContent>
        <LoadingContent>
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                Loading...<br />
                <FluentProgress Width="240px" />
            </FluentStack>
        </LoadingContent>
    </FluentDataGrid>
</div>

<FluentPaginator State="@pagination" />

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private string nameFilter = string.Empty;

    private QueueDbContext? _dbContext;
    
    IQueryable<QueueState>? FilteredQueues
    {
        get
        {
            var result = queues;

            if (result is not null && !string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => EF.Functions.Like(c.Name, $"%{nameFilter}%"));
            }
            
            return result;
        }
    }

    private IQueryable<QueueState>? queues;

    protected override void OnInitialized()
    {
        _dbContext = DbContextFactory.CreateDbContext();
        queues = _dbContext.Queues.AsNoTracking().AsQueryable();
    }
    
    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }
    
    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void NavigateToQueue(QueueState context)
    {
        NavManager.NavigateTo($"/queue/{context.Name}");
    }

    public void Dispose()
    {
        _dbContext?.Dispose();
    }
}
